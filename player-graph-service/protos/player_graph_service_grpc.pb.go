// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: player_graph_service.proto

package playergraphpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlayerGraphService_GetPlayerData_FullMethodName  = "/playergraph.PlayerGraphService/GetPlayerData"
	PlayerGraphService_GetPlayerGraph_FullMethodName = "/playergraph.PlayerGraphService/GetPlayerGraph"
)

// PlayerGraphServiceClient is the client API for PlayerGraphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerGraphServiceClient interface {
	// Defines a RPC method.
	GetPlayerData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PlayerResponse, error)
	GetPlayerGraph(ctx context.Context, in *GraphRequest, opts ...grpc.CallOption) (*GraphResponse, error)
}

type playerGraphServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerGraphServiceClient(cc grpc.ClientConnInterface) PlayerGraphServiceClient {
	return &playerGraphServiceClient{cc}
}

func (c *playerGraphServiceClient) GetPlayerData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PlayerResponse, error) {
	out := new(PlayerResponse)
	err := c.cc.Invoke(ctx, PlayerGraphService_GetPlayerData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerGraphServiceClient) GetPlayerGraph(ctx context.Context, in *GraphRequest, opts ...grpc.CallOption) (*GraphResponse, error) {
	out := new(GraphResponse)
	err := c.cc.Invoke(ctx, PlayerGraphService_GetPlayerGraph_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerGraphServiceServer is the server API for PlayerGraphService service.
// All implementations must embed UnimplementedPlayerGraphServiceServer
// for forward compatibility
type PlayerGraphServiceServer interface {
	// Defines a RPC method.
	GetPlayerData(context.Context, *emptypb.Empty) (*PlayerResponse, error)
	GetPlayerGraph(context.Context, *GraphRequest) (*GraphResponse, error)
	mustEmbedUnimplementedPlayerGraphServiceServer()
}

// UnimplementedPlayerGraphServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlayerGraphServiceServer struct {
}

func (UnimplementedPlayerGraphServiceServer) GetPlayerData(context.Context, *emptypb.Empty) (*PlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerData not implemented")
}
func (UnimplementedPlayerGraphServiceServer) GetPlayerGraph(context.Context, *GraphRequest) (*GraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerGraph not implemented")
}
func (UnimplementedPlayerGraphServiceServer) mustEmbedUnimplementedPlayerGraphServiceServer() {}

// UnsafePlayerGraphServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerGraphServiceServer will
// result in compilation errors.
type UnsafePlayerGraphServiceServer interface {
	mustEmbedUnimplementedPlayerGraphServiceServer()
}

func RegisterPlayerGraphServiceServer(s grpc.ServiceRegistrar, srv PlayerGraphServiceServer) {
	s.RegisterService(&PlayerGraphService_ServiceDesc, srv)
}

func _PlayerGraphService_GetPlayerData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerGraphServiceServer).GetPlayerData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerGraphService_GetPlayerData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerGraphServiceServer).GetPlayerData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerGraphService_GetPlayerGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerGraphServiceServer).GetPlayerGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerGraphService_GetPlayerGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerGraphServiceServer).GetPlayerGraph(ctx, req.(*GraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerGraphService_ServiceDesc is the grpc.ServiceDesc for PlayerGraphService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerGraphService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playergraph.PlayerGraphService",
	HandlerType: (*PlayerGraphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayerData",
			Handler:    _PlayerGraphService_GetPlayerData_Handler,
		},
		{
			MethodName: "GetPlayerGraph",
			Handler:    _PlayerGraphService_GetPlayerGraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "player_graph_service.proto",
}
